(()=>{"use strict";var t=function(r,e){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,r){t.__proto__=r}||function(t,r){for(var e in r)Object.prototype.hasOwnProperty.call(r,e)&&(t[e]=r[e])},t(r,e)};function r(r,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=r}t(r,e),r.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}function e(t,r){var e,n,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(e)throw new TypeError("Generator is already executing.");for(;u;)try{if(e=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,n=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=r.call(t,u)}catch(t){i=[6,t],n=0}finally{e=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}}function n(t){var r="function"==typeof Symbol&&Symbol.iterator,e=r&&t[r],n=0;if(e)return e.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(r?"Object is not iterable.":"Symbol.iterator is not defined.")}function o(t,r){var e="function"==typeof Symbol&&t[Symbol.iterator];if(!e)return t;var n,o,i=e.call(t),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(e=i.return)&&e.call(i)}finally{if(o)throw o.error}}return u}function i(t,r,e){if(e||2===arguments.length)for(var n,o=0,i=r.length;o<i;o++)!n&&o in r||(n||(n=Array.prototype.slice.call(r,0,o)),n[o]=r[o]);return t.concat(n||Array.prototype.slice.call(r))}function u(t){return this instanceof u?(this.v=t,this):new u(t)}function s(t,r,e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,o=e.apply(t,r||[]),i=[];return n={},s("next"),s("throw"),s("return"),n[Symbol.asyncIterator]=function(){return this},n;function s(t){o[t]&&(n[t]=function(r){return new Promise((function(e,n){i.push([t,r,e,n])>1||c(t,r)}))})}function c(t,r){try{(e=o[t](r)).value instanceof u?Promise.resolve(e.value.v).then(a,l):f(i[0][2],e)}catch(t){f(i[0][3],t)}var e}function a(t){c("next",t)}function l(t){c("throw",t)}function f(t,r){t(r),i.shift(),i.length&&c(i[0][0],i[0][1])}}function c(t){return"function"==typeof t}function a(t){var r=t((function(t){Error.call(t),t.stack=(new Error).stack}));return r.prototype=Object.create(Error.prototype),r.prototype.constructor=r,r}Object.create,Object.create;var l=a((function(t){return function(r){t(this),this.message=r?r.length+" errors occurred during unsubscription:\n"+r.map((function(t,r){return r+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=r}}));function f(t,r){if(t){var e=t.indexOf(r);0<=e&&t.splice(e,1)}}var p=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._finalizers=null}var r;return t.prototype.unsubscribe=function(){var t,r,e,u,s;if(!this.closed){this.closed=!0;var a=this._parentage;if(a)if(this._parentage=null,Array.isArray(a))try{for(var f=n(a),p=f.next();!p.done;p=f.next())p.value.remove(this)}catch(r){t={error:r}}finally{try{p&&!p.done&&(r=f.return)&&r.call(f)}finally{if(t)throw t.error}}else a.remove(this);var h=this.initialTeardown;if(c(h))try{h()}catch(t){s=t instanceof l?t.errors:[t]}var v=this._finalizers;if(v){this._finalizers=null;try{for(var b=n(v),d=b.next();!d.done;d=b.next()){var m=d.value;try{y(m)}catch(t){s=null!=s?s:[],t instanceof l?s=i(i([],o(s)),o(t.errors)):s.push(t)}}}catch(t){e={error:t}}finally{try{d&&!d.done&&(u=b.return)&&u.call(b)}finally{if(e)throw e.error}}}if(s)throw new l(s)}},t.prototype.add=function(r){var e;if(r&&r!==this)if(this.closed)y(r);else{if(r instanceof t){if(r.closed||r._hasParent(this))return;r._addParent(this)}(this._finalizers=null!==(e=this._finalizers)&&void 0!==e?e:[]).push(r)}},t.prototype._hasParent=function(t){var r=this._parentage;return r===t||Array.isArray(r)&&r.includes(t)},t.prototype._addParent=function(t){var r=this._parentage;this._parentage=Array.isArray(r)?(r.push(t),r):r?[r,t]:t},t.prototype._removeParent=function(t){var r=this._parentage;r===t?this._parentage=null:Array.isArray(r)&&f(r,t)},t.prototype.remove=function(r){var e=this._finalizers;e&&f(e,r),r instanceof t&&r._removeParent(this)},t.EMPTY=((r=new t).closed=!0,r),t}(),h=p.EMPTY;function v(t){return t instanceof p||t&&"closed"in t&&c(t.remove)&&c(t.add)&&c(t.unsubscribe)}function y(t){c(t)?t():t.unsubscribe()}var b=null,d=null,m=void 0,w=!1,_=!1,x={setTimeout:function(t,r){for(var e=[],n=2;n<arguments.length;n++)e[n-2]=arguments[n];var u=x.delegate;return(null==u?void 0:u.setTimeout)?u.setTimeout.apply(u,i([t,r],o(e))):setTimeout.apply(void 0,i([t,r],o(e)))},clearTimeout:function(t){var r=x.delegate;return((null==r?void 0:r.clearTimeout)||clearTimeout)(t)},delegate:void 0};function S(t){x.setTimeout((function(){if(!b)throw t;b(t)}))}function g(){}var E=O("C",void 0,void 0);function O(t,r,e){return{kind:t,value:r,error:e}}var T=null;function I(t){if(w){var r=!T;if(r&&(T={errorThrown:!1,error:null}),t(),r){var e=T,n=e.errorThrown,o=e.error;if(T=null,n)throw o}}else t()}var P=function(t){function e(r){var e=t.call(this)||this;return e.isStopped=!1,r?(e.destination=r,v(r)&&r.add(e)):e.destination=U,e}return r(e,t),e.create=function(t,r,e){return new k(t,r,e)},e.prototype.next=function(t){this.isStopped?F(function(t){return O("N",t,void 0)}(t),this):this._next(t)},e.prototype.error=function(t){this.isStopped?F(O("E",void 0,t),this):(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped?F(E,this):(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},e.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},e}(p),j=Function.prototype.bind;function A(t,r){return j.call(t,r)}var C=function(){function t(t){this.partialObserver=t}return t.prototype.next=function(t){var r=this.partialObserver;if(r.next)try{r.next(t)}catch(t){z(t)}},t.prototype.error=function(t){var r=this.partialObserver;if(r.error)try{r.error(t)}catch(t){z(t)}else z(t)},t.prototype.complete=function(){var t=this.partialObserver;if(t.complete)try{t.complete()}catch(t){z(t)}},t}(),k=function(t){function e(r,e,n){var o,i,u=t.call(this)||this;return c(r)||!r?o={next:null!=r?r:void 0,error:null!=e?e:void 0,complete:null!=n?n:void 0}:u&&_?((i=Object.create(r)).unsubscribe=function(){return u.unsubscribe()},o={next:r.next&&A(r.next,i),error:r.error&&A(r.error,i),complete:r.complete&&A(r.complete,i)}):o=r,u.destination=new C(o),u}return r(e,t),e}(P);function z(t){var r;w?(r=t,w&&T&&(T.errorThrown=!0,T.error=r)):S(t)}function F(t,r){var e=d;e&&x.setTimeout((function(){return e(t,r)}))}var U={closed:!0,next:g,error:function(t){throw t},complete:g},V="function"==typeof Symbol&&Symbol.observable||"@@observable";function Y(t){return t}function R(t){return 0===t.length?Y:1===t.length?t[0]:function(r){return t.reduce((function(t,r){return r(t)}),r)}}var M=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(r){var e=new t;return e.source=this,e.operator=r,e},t.prototype.subscribe=function(t,r,e){var n,o=this,i=(n=t)&&n instanceof P||function(t){return t&&c(t.next)&&c(t.error)&&c(t.complete)}(n)&&v(n)?t:new k(t,r,e);return I((function(){var t=o,r=t.operator,e=t.source;i.add(r?r.call(i,e):e?o._subscribe(i):o._trySubscribe(i))})),i},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(r){t.error(r)}},t.prototype.forEach=function(t,r){var e=this;return new(r=N(r))((function(r,n){var o=new k({next:function(r){try{t(r)}catch(t){n(t),o.unsubscribe()}},error:n,complete:r});e.subscribe(o)}))},t.prototype._subscribe=function(t){var r;return null===(r=this.source)||void 0===r?void 0:r.subscribe(t)},t.prototype[V]=function(){return this},t.prototype.pipe=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return R(t)(this)},t.prototype.toPromise=function(t){var r=this;return new(t=N(t))((function(t,e){var n;r.subscribe((function(t){return n=t}),(function(t){return e(t)}),(function(){return t(n)}))}))},t.create=function(r){return new t(r)},t}();function N(t){var r;return null!==(r=null!=t?t:m)&&void 0!==r?r:Promise}var B=a((function(t){return function(){t(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),G=function(t){function e(){var r=t.call(this)||this;return r.closed=!1,r.currentObservers=null,r.observers=[],r.isStopped=!1,r.hasError=!1,r.thrownError=null,r}return r(e,t),e.prototype.lift=function(t){var r=new H(this,this);return r.operator=t,r},e.prototype._throwIfClosed=function(){if(this.closed)throw new B},e.prototype.next=function(t){var r=this;I((function(){var e,o;if(r._throwIfClosed(),!r.isStopped){r.currentObservers||(r.currentObservers=Array.from(r.observers));try{for(var i=n(r.currentObservers),u=i.next();!u.done;u=i.next())u.value.next(t)}catch(t){e={error:t}}finally{try{u&&!u.done&&(o=i.return)&&o.call(i)}finally{if(e)throw e.error}}}}))},e.prototype.error=function(t){var r=this;I((function(){if(r._throwIfClosed(),!r.isStopped){r.hasError=r.isStopped=!0,r.thrownError=t;for(var e=r.observers;e.length;)e.shift().error(t)}}))},e.prototype.complete=function(){var t=this;I((function(){if(t._throwIfClosed(),!t.isStopped){t.isStopped=!0;for(var r=t.observers;r.length;)r.shift().complete()}}))},e.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(e.prototype,"observed",{get:function(){var t;return(null===(t=this.observers)||void 0===t?void 0:t.length)>0},enumerable:!1,configurable:!0}),e.prototype._trySubscribe=function(r){return this._throwIfClosed(),t.prototype._trySubscribe.call(this,r)},e.prototype._subscribe=function(t){return this._throwIfClosed(),this._checkFinalizedStatuses(t),this._innerSubscribe(t)},e.prototype._innerSubscribe=function(t){var r=this,e=this,n=e.hasError,o=e.isStopped,i=e.observers;return n||o?h:(this.currentObservers=null,i.push(t),new p((function(){r.currentObservers=null,f(i,t)})))},e.prototype._checkFinalizedStatuses=function(t){var r=this,e=r.hasError,n=r.thrownError,o=r.isStopped;e?t.error(n):o&&t.complete()},e.prototype.asObservable=function(){var t=new M;return t.source=this,t},e.create=function(t,r){return new H(t,r)},e}(M),H=function(t){function e(r,e){var n=t.call(this)||this;return n.destination=r,n.source=e,n}return r(e,t),e.prototype.next=function(t){var r,e;null===(e=null===(r=this.destination)||void 0===r?void 0:r.next)||void 0===e||e.call(r,t)},e.prototype.error=function(t){var r,e;null===(e=null===(r=this.destination)||void 0===r?void 0:r.error)||void 0===e||e.call(r,t)},e.prototype.complete=function(){var t,r;null===(r=null===(t=this.destination)||void 0===t?void 0:t.complete)||void 0===r||r.call(t)},e.prototype._subscribe=function(t){var r,e;return null!==(e=null===(r=this.source)||void 0===r?void 0:r.subscribe(t))&&void 0!==e?e:h},e}(G),L=function(t){function e(){var r=null!==t&&t.apply(this,arguments)||this;return r._value=null,r._hasValue=!1,r._isComplete=!1,r}return r(e,t),e.prototype._checkFinalizedStatuses=function(t){var r=this,e=r.hasError,n=r._hasValue,o=r._value,i=r.thrownError,u=r.isStopped,s=r._isComplete;e?t.error(i):(u||s)&&(n&&t.next(o),t.complete())},e.prototype.next=function(t){this.isStopped||(this._value=t,this._hasValue=!0)},e.prototype.complete=function(){var r=this,e=r._hasValue,n=r._value;r._isComplete||(this._isComplete=!0,e&&t.prototype.next.call(this,n),t.prototype.complete.call(this))},e}(G);function q(t,r,e,n,o){return new D(t,r,e,n,o)}var D=function(t){function e(r,e,n,o,i,u){var s=t.call(this,r)||this;return s.onFinalize=i,s.shouldUnsubscribe=u,s._next=e?function(t){try{e(t)}catch(t){r.error(t)}}:t.prototype._next,s._error=o?function(t){try{o(t)}catch(t){r.error(t)}finally{this.unsubscribe()}}:t.prototype._error,s._complete=n?function(){try{n()}catch(t){r.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,s}return r(e,t),e.prototype.unsubscribe=function(){var r;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var e=this.closed;t.prototype.unsubscribe.call(this),!e&&(null===(r=this.onFinalize)||void 0===r||r.call(this))}},e}(P),J="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function K(t){return new M((function(r){(function(t,r){var o,i,u,s,c,a,l,f;return c=this,a=void 0,f=function(){var c,a;return e(this,(function(e){switch(e.label){case 0:e.trys.push([0,5,6,11]),o=function(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,e=t[Symbol.asyncIterator];return e?e.call(t):(t=n(t),r={},o("next"),o("throw"),o("return"),r[Symbol.asyncIterator]=function(){return this},r);function o(e){r[e]=t[e]&&function(r){return new Promise((function(n,o){!function(t,r,e,n){Promise.resolve(n).then((function(r){t({value:r,done:e})}),r)}(n,o,(r=t[e](r)).done,r.value)}))}}}(t),e.label=1;case 1:return[4,o.next()];case 2:if((i=e.sent()).done)return[3,4];if(c=i.value,r.next(c),r.closed)return[2];e.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return a=e.sent(),u={error:a},[3,11];case 6:return e.trys.push([6,,9,10]),i&&!i.done&&(s=o.return)?[4,s.call(o)]:[3,8];case 7:e.sent(),e.label=8;case 8:return[3,10];case 9:if(u)throw u.error;return[7];case 10:return[7];case 11:return r.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(t,r){function e(t){try{o(f.next(t))}catch(t){r(t)}}function n(t){try{o(f.throw(t))}catch(t){r(t)}}function o(r){var o;r.done?t(r.value):(o=r.value,o instanceof l?o:new l((function(t){t(o)}))).then(e,n)}o((f=f.apply(c,a||[])).next())}))})(t,r).catch((function(t){return r.error(t)}))}))}const Q=new L,W=new G;W.next("Hey!");const X=new M((t=>{let r=1;setInterval((()=>{t.next(r++)}),1e3)})).pipe(($=W,Z=function(t,r){var o=!1,i=q(r,(function(){null==i||i.unsubscribe(),o=!0}),g);(function(t){if(t instanceof M)return t;if(null!=t){if(function(t){return c(t[V])}(t))return f=t,new M((function(t){var r=f[V]();if(c(r.subscribe))return r.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if((l=t)&&"number"==typeof l.length&&"function"!=typeof l)return a=t,new M((function(t){for(var r=0;r<a.length&&!t.closed;r++)t.next(a[r]);t.complete()}));if(c(null==(i=t)?void 0:i.then))return o=t,new M((function(t){o.then((function(r){t.closed||(t.next(r),t.complete())}),(function(r){return t.error(r)})).then(null,S)}));if(function(t){return Symbol.asyncIterator&&c(null==t?void 0:t[Symbol.asyncIterator])}(t))return K(t);if(function(t){return c(null==t?void 0:t[J])}(t))return r=t,new M((function(t){var e,o;try{for(var i=n(r),u=i.next();!u.done;u=i.next()){var s=u.value;if(t.next(s),t.closed)return}}catch(t){e={error:t}}finally{try{u&&!u.done&&(o=i.return)&&o.call(i)}finally{if(e)throw e.error}}t.complete()}));if(function(t){return c(null==t?void 0:t.getReader)}(t))return K(function(t){return s(this,arguments,(function(){var r,n,o;return e(this,(function(e){switch(e.label){case 0:r=t.getReader(),e.label=1;case 1:e.trys.push([1,,9,10]),e.label=2;case 2:return[4,u(r.read())];case 3:return n=e.sent(),o=n.value,n.done?[4,u(void 0)]:[3,5];case 4:return[2,e.sent()];case 5:return[4,u(o)];case 6:return[4,e.sent()];case 7:return e.sent(),[3,2];case 8:return[3,10];case 9:return r.releaseLock(),[7];case 10:return[2]}}))}))}(t))}var r,o,i,a,l,f;throw function(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}(t)})($).subscribe(i),t.subscribe(q(r,(function(t){return o&&r.next(t)})))},function(t){if(function(t){return c(null==t?void 0:t.lift)}(t))return t.lift((function(t){try{return Z(t,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}));var Z,$;X.subscribe((t=>rt(t)));let tt=1;function rt(t){let r=document.createElement("li"),e=document.createTextNode(t);r.appendChild(e),document.getElementById("output").appendChild(r)}setInterval((()=>Q.next(tt++)),100),setTimeout((()=>{Q.subscribe((t=>rt("Observer 2: "+t))),Q.complete()}),500)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,